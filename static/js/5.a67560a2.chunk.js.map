{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","processState","setProcessState","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","process","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","getCharByName","name","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","splice","comic","title","pageCount","language","textObjects","price","prices","Skeleton","className","setContent","Component","Spinner","View","toggleStyle","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","round","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","to","resourceURI","substring","CharInfo","charId","CharSearchForm","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","onChange","target","value","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.a67560a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, processState, setProcessState} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = process.env.REACT_APP_API_KEY;\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const getCharByName = async (name = 'Thor') => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: !char.description ? \"Unfortunately there is no description for this character\" : char.description.slice(0, 210),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.splice(0, 10)\r\n        }\r\n    }\r\n\r\n    const _transformComics = comic => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || \"There is no description\",\r\n\t\t\tpageCount: comic.pageCount ? `${comic.pageCount} p.` : \"No information about the number of pages\",\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : \"not available\",\r\n            thumbnail: `${comic.thumbnail.path}.${comic.thumbnail.extension}`\r\n        }\r\n\r\n    }\r\n\r\n    return {clearError,\r\n            processState,\r\n            setProcessState,\r\n            getAllCharacters,\r\n            getCharacter,\r\n            getCharByName,\r\n            getAllComics,\r\n            getComic};\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [processState, setProcessState] = useState('waiting');\r\n\r\n    const request = useCallback(\r\n        async (url, method = 'GET', body = null, headers = {'Content-Type': 'aplication/json'}) => {\r\n\r\n            setProcessState('loading');\r\n\r\n            try {\r\n                const response = await fetch(url, {method, body, headers});\r\n\r\n                if(!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                return data;\r\n\r\n            } catch(e) {\r\n                setProcessState('error');\r\n                throw e;\r\n            }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcessState('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, processState, setProcessState};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const {getCharacter, clearError, processState, setProcessState} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400  - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcessState('confirmed'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(processState, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n\r\n    const notImage = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    const toggleStyle = thumbnail === notImage ? {objectFit: 'contain'} : {objectFit: 'cover'};\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={toggleStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {getAllCharacters, processState, setProcessState} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcessState('confirmed'));\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if(newCharList.length < 9) {\r\n            ended = true\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            const notImage = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n            const toggleStyle = item.thumbnail === notImage ? {objectFit: 'fill'} : {objectFit: 'cover'};\r\n\r\n            return (\r\n                <CSSTransition timeout={Math.round(300 + Math.random() * 1000)} classNames='char__item' key={item.id}>\r\n                    <li className='char__item'\r\n                        tabIndex={0}\r\n                        key={item.id}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}\r\n                        >\r\n                        <img src={item.thumbnail} alt={item.name} style={toggleStyle}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <TransitionGroup className=\"char__grid\" component='ul'>\r\n                {items}\r\n            </TransitionGroup>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(processState, () => renderItems(charList), newItemLoading);\r\n        // eslint-disable-next-line\r\n    }, [processState]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, processState, setProcessState} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcessState('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(processState, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n\r\n    const notImage = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    const toggleStyle = thumbnail === notImage ? {objectFit: 'contain'} : {objectFit: 'cover'};\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={toggleStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : \"There are no comics with this character\"}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                <Link to={`/comics/${item.resourceURI.substring(43)}`}>\r\n                                    {item.name}\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {clearError, getCharByName, processState, setProcessState} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcessState('confirmed'));\r\n    }\r\n    \r\n    const errorMessage = processState === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage/></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form onChange={e => !e.target.value ? setChar(null) : null}>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id='charName'\r\n                            type=\"text\" \r\n                            name=\"charName\" \r\n                            placeholder=\"Enter name\"\r\n                        />\r\n                        <button className=\"button button__main\" type='submit' disabled={processState === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage className='char__search-error' name='charName' component='div'/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // Метод Предохранителя, который только обновляет state ошибки!\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true};\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList \r\n                        onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}